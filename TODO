Renderer experiments
====
- Draw world by iterating clusters in PVS
- Each cluster has a sorted list of material references
- Each material reference includes index and count into world VBO
- Each material ref must be unique in terms of surface flags, lightmap, etc
- This is really where a lot of the work is; completely rewriting the BSP
  loading code
  
typedef struct {
	r_image_t *image;
	int32_t flags;
	GLuint lightmap_texnum;
	GLuint deluxemap_texnum;
	GLuint index;
	GLuint count;
} r_material_ref_t;

typedef struct {
	int16_t vis_frame;
	r_material_ref_t *materials;
	uint16_t num_materials;
} r_bsp_cluster_t;
   
- Drawing each cluster then looks like:

R_DrawBspCluster(const r_bsp_cluster_t *c) {
	GLuint_t i;
	
	r_material_ref_t *m = c->materials;
	for (i = 0; i < c->num_materials; i++, m++) {
		
		R_UseMaterial(m);
		
		glDrawArrays(GL_TRIANGLES, m->index, m->count);
	}
}

- Notice that we never get down to the leaf level; if a cluster is in PVS
  we draw it, in its entirety. Let the card cull back faces etc.

====

Ctf scoring for assits, defense, etc.

Shell effect via world.cfg

Sound for telefrag

Add configurable attack to dynamic lights for misc_emit etc..
